介绍一下BFC、IFC、FFC、GFC、
    答：首先CSS2.1中只有BFC和IFC，CSS3中才有GFC和FFC
           FC：是W3C中规范中的一个概念，他是页面中的一块渲染区域，并且有一套渲染规则，它决定了子元素如何定位以及和其他元素的 关系和相互作用
           BFC：块级格式化上下文
                  规则 ：
                          （1）内部盒子会在垂直方向，一个一个放置
                          （2）盒子垂直方向的距离由margin决定，属于同一个BFC两个相邻的box会发生重叠
                          （3）每个元素的 margin box的左边与包含块的border box的左边相接触
                          （4）BFC的区域不会与float box重叠
                          （5)  BFC就是页面上的一个隔离的独立容器，内部的子元素不会影响外部的元素
                          （6）计算BFC的高度时浮动元素也参与计算
                哪些元素会产生BFC？
                          （1）根元素
                          （2）float属性不为none时
                          （3）position为absolute或者是fixed时
                          （4）overflow不为visible
         FFC：自适应格式化上下文
                  display的值为flex或者是inline-flex的元素将会产生自适应容器，可惜这个属性只有在谷歌和火狐才支持，不过在移动端也够了，至少苹果和谷歌还是可以的
                  Flex Box由伸缩容器和伸缩项目组成，通过设置元素的display属性为flex或inline-flex可以得到一个伸缩容器，设置为flex的容器被渲染成为一个块级元素，而设置为inline-flex的容器则渲染为一个行内元素
                 伸缩容器中的每一个子元素都是一个伸缩项目。伸缩项目可以是任意数量的，伸缩容器外和伸缩项目内的一切元素都不受影响，简单说FlexBox定义了伸缩容器内伸缩项目该如何布局

        GFC：网格布局格式化上下文
                  当一个元素设置display为grid的时候，此元素将会获得一块独立的渲染区域，我们可以用通过在网格容器上定义网格行和网格列属性，在网格项目上定义网格行和网格列为每一个网格项目定义位置和空间 
                 作用：首先同样是一个二维的表格，但GridLayout会有更加丰富的属性来控制列，控制对齐以及更为精细渲染语义和控制           IFC:内联格式化上下文
                  IFC的line Box(线框)高度由其包含行内元素中最高的实际高度来计算（不受竖直方向的padding和margin的影响 ）
                 IFC中的line Box一般左右都贴紧整个IFC，但是会因为float元素而扰乱，float元素会位于IFC与line Box之间，使得line Box宽度缩短。同个IFC下的多个line Box 高度会不同，IFC中时不可能有块级元素的，当插入块级元素时会产生两个匿名块与div'分隔开，即产生两个IFC，每个IFC对外表现为块级元素，与div垂直并列
                 作用 ：水平居中：当一个块要在环境中水平居中时设置其为inline-block则会在外层产生IFC，通过text-align'则可以使其水平居中
                            垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align：middle。其他行内元素则可以在此父元素下垂直居中

ECMA script与JavaScript的关系
        答：ECMAScript是JavaScript语言的国际化标准，JavaScript是ECMAScript的实现。
js与jq
       原生的js比jq快，因为类似于jq这样的库必须兼容各种浏览器，考虑到通用性，必然导致性能的损失
       js的缺点：
                    （1）安全问题：运行在客户端，可能被用于黑客目的
                    （2）渲染问题：在不同浏览器中的处理结果不同，兼容性问题
      js的优点：
                    （1）性能。由于js运行在客户端，节省了服务器端的请求时间和带宽，运行速度快
      jq的优点：
                    （1）少写多做
                    （2）API强大，强大的选择器
、                 （3）链式操作，书写简便
                    （4）解决js跨平台的兼容问题
    jq的缺点：
                    （1）没有js快
                    （2）如果项目中包含多个版本的jq，可能会发生冲突
JavaScript与es5与es6的区别
      JavaScript是一种弱类型，动态类型基于原型的客户端脚本语言，用来给HTML网页增加功能
动态：在运行时确定数据类型，变量使用之间不需要声明类型，通常变量类型是被赋值的那个值的类型。弱类：计算时可以不同类型之间对使用者透明的隐式转换，即使类型不正确，也可以通过隐式转换来得到正确的类型。原型：新对象继承对象，将自身的属性共享给新对象，模板对象称为原型，这样新对象实例化后不但可以享有自己创建时和运行时定义的属性，而且可以享有原型对象的属性，新对象指函数，模板对象是实例对象，实例对象是不能继承原型的 ，函数才可以
      JavaScript由三部分组成：ECMA Script 【(核心)  作为核心，它规定了语言的组成：语法，类型，语句，关键字，保留字，操作符，对象】DOM【(文档对象模型)】
==============================================================================================================================
为什么要使用懒加载？
懒加载的 特点？
==============================================================================================================================
面向过程与面向对象对比？
面向过程
优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如，单片机就采用面向过程
缺点：没有面向对象易维护，易复用，易扩展
面向对象
优点：易维护，易复用，易扩展，由于面向对象有封装继承多态的特性，可以设计出低耦合的系统，使系统更加灵活，更加易于维护
缺点：性能比面向过程低
面向过程相当于蛋炒饭，面向过程相当于盖浇饭，比较简单的程序建议使用面向过程书写，比较复杂且多人的建议使用面向对象
===========================================================================================================================
什么是node？
node是可以使JavaScript运行在服务器端的
node是运行在chrome的v8环境中的
http状态码
     100 Continue 继续，一般在发送post请求时，已经发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息
    200 OK 正常返回信息
    201 Created 请求成功并且服务器创建了新的资源
    202 Accepted 服务器已接受请求，但尚未处理
    301 Moved Permanently 请求的网页已永久移动到新位置。
    302 Found 临时性重定向。
    303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。
    304 Not Modified 自从上次请求后，请求的网页未修改过。
    400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。
    401 Unauthorized 请求未授权。
    403 Forbidden 禁止访问。
    404 Not Found 找不到如何与 URI 相匹配的资源。
    500 Internal Server Error 最常见的服务器端错误。
    503 Service Unavailable 服务器端暂时无法处理请求(可能是过载或维护)。
  v8的优点
   2009年2月node被开发出来，node项目开发历史【简要了解】
   2009年2月node诞生，2009底开源，2016年火爆
  node特点
  （1）单线程，node.js不为每个用户创建一个新线程，而仅仅是使用一个线程
  （2）非阻塞I/O
  （3）事件驱动
  请求方式
  listen 监听端口
  local host：3000/文件名
  file system文件系统   作用：操作文件
  var fs=require("fs");
  响应头
  先全局后异步
   readfile   读文件
   readir
  http模块化
============================================================================================================
进程和线程的主要区别（总结）
什么叫单线程？
什么叫非阻塞I/O
什么叫事件驱动？
同步?
异步？
设计模式
模块分类详解
buffer，fs详解；
循环语句
============================================================================================================
require引入模块
创建服务器  http.createServer（）
监听端口
local host 代表本地 ==http：//127.0.0.1：3000代表本地
res=response响应      req=request  请求
res.end()结束响应     必须为字符串
使用.tostring（）来转化为字符串
res，end（（1+2+3）.tostring）
buffer  缓存区
pending状态
路径问题
文本类型
favicon。ico
解决favicon问题的方法
if（req.url=="/favicon.ico"）{
return
}
search ？【hash #】【 href url】【port 端口】【host 主机名】【hostname  主机名】
 url 
 parse     解析     url.parse(req.url)===字符串      url.parse(req.url，true)===加不加true的区别   将字符串转化为对象   
                               query  获取get方式传输过来的参数
               port   端口域
               auth   权限
               host   主机名
               port   端口
               hostname   主机名
               hash   hash值
               serch  ?
 *            query    获取get方式传输过来的数据
               pathname   /后面的一级
               path 完整路径
               href   页面跳转路径
               slashes

 resolve  按照url路径的正确方式解析路径      转为字符串，第二个参数的路由会替换成当前路径的一级路由
 format   格式化
 模块化  Common.js
    module.exports
    es
    export             抛出export  default
    import             导入   
    exports和module.exports的区别
      本身都是一个数组
      exports指向module.exports同时exports是module.exports的引用
      默认是一个空对象
      node_module     项目依赖
      npm
=======================================================================================
const常量有哪些？
暂时性死区？
块级作用域 
防抖节流
var let
模块化
es6
迭代处理函数【递归】     函数自己调用自己
暴露
正则
三级联动
瀑布流
左右轮播
上下轮播
淡入淡出
选项卡
path与url的区别

=============================================================================================
npm      包管理工具
             npm  init 项目初始化
             silly-datetimet'
             npm install  下载 安装依赖
             npm install silly-datetimet    （-g --save【-s】--save-dev（-D））  
             -g  全局安装
             --save安装在生产环境
             --save-dev  安装在开发环境
             nvm node  版本管理工具
             nrm    镜像源管理工具
                npm.install
               nrm -ls列出镜像源工具
      =========================================================================================
   步骤：
          1，新建一个文件夹
          2，在cmd中输入npm -v检查npm版本是否存在
          3.  在 cmd中输入npm init用来在文件夹中创建package.json
          4,  在cmd中输入npm install nrm -g  来下载nrm
          5.在cmd中输入npm install silly-datetime -save
          6.在cmd中输入 npm install formidable --save   






======================================================================================================
fields     文本域        
files       文件域
path      模块
             
=======================================================================================================
cmd和amd的区别？
模板引擎   ejs   art-template    jade=》pug     swig
cmd     npm  install ejs
events  事件
stream 流
Buffer  缓存区
express   基于node平台快速开放极简的开发框架
koa   egg
npm   install  ejs  --save-dev  -g
res.end与res.send的区别？
node.js的四种传参方式
静态资源   static】
express.static
前后端分离
   页面自己写
   接口=》
       登录  username  password   code
       http：//127.0.0.1：3000/login     post
     $.ajax({
           url:"http://127.0.0.1:3000",
           type:"post",
           dataType:{},
       
           data:{
                 
                }
     })


_dirname    相对路径
_filename    绝对路径
settimeout
setInterval
modul	
=========================================================================================================
node
  定义
  特点
  历史
  模块{
         内置模块
                http 服务模块
                      createServer（callback(request,response)）request请求   response 响应
                     listen（port，callback）
                fs     文件系统
                     读文件   readFile（路径，callback）
                     写文件   writeFile  (路径，callback)   默认为覆盖    添加则需{“flag”：“a”} a  append      r read     w write
                     复制      
                     删除文件        unlink
                     创建目录        mkdir
                     删除目录        rmdir
                     改名               rename（针对目录文件）
                    判断状态         isD	
                url   地址模块
               path  路径模块
               query String   查询字符串模块
               buffer   缓冲区
               events  事件模块
               stream  流
                            事件流
                            文件流
         自定义模块
                module.exports与exports的区别
                       1.值是数据类型
                       2.默认空对象
               module.exports,exports,require ,import,export,export default分别是什么意思？
               cmd与amd的区别        
}
express
=======================================================================================================
域名
ajax
移动端适配
pc端视口
适配
cookie
session
localstorage
==== ==============================================================================================================================
数据库分类：
      非关系型数据库
       mongodb    SQL sever     sqllite
      关系：库=》集合=》对象
     语句： 
            查看当前所有数据库     show dbs
            使用数据库  use   数据库名          use store
            查看选中数据库下面的所有集合 show collections  
            插      db.集合名.insert({})  插入单条数据
                     db.集合名.insert([{},{}])插入多条数据
                     db.集合名.insertMany([{},{}])  3.4 
                     db.集合名.insertOne({})插入单条数据   3.4
                     db.集合名.save({})   保存文档
            删      db.集合名.remove（{}）传空对象为删除所有    可以传具体的值来进行删除
                     db.集合名.deleteOne({})   删除单条数据
                     db.集合名.deleteMany()         只要是符合条件的都会进行删除，即删除匹配数据
            改      db.集合名.update({"username":"qq"},{$set:{"username":"yy"}})  更新数据
                      db.集合名.update({"username":"qq"},{$set:{"name":"yy"}}) 同行新增数据
                     db.集合名.updateOne({}.{$set:{}})更新一条
                     db.集合名.updateMany({},{$set:{}})  更新多条
            查      db.集合名.find()查找所有
                     db.集合名.find({})查找对应数据
                     db.findOne({});查找一条数据
                     db.findMany({});查找多条数据
                     db查看当前使用数据库
                     use 数据库名    创建数据库
                    db.dropDatabase();  删除当前使用数据库
                    and并且  or或者  $gt大于   $gte大于等于  $lt小于  $Ite小于等于    $ne不等于
                    limit(个数)  截取      count（）返回数据数量   skip（）跳过     sort（）排序
 db.local.find().sort({"y":-1})倒序
 db.local.find().sort({"y":1})正序
 db.local.find({“age”：{“$gt”:4}})
创建用户权限	
     关系型数据库
      MySQL   orancle=》DBA
       库=》表=>对象
========================================================================================================================
git   =》github
码云 （git，svn）
分布管理系统
三端：本地区   暂存区  远端区
git可视化    source tree
mongodb   rototMongo   
cd four   进入当前目录
git init    项目初始化




svn 、
集成管理系统
两端 ： 本地区  远端区
commit   提交  本地=》远端
update    更新（拉取）远端=》本地














































































































































































































































































































































=============================================================================================================================











